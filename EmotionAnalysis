import cv2
import numpy as np
import tensorflow as tf

# Load the pre-trained model
new_model = tf.keras.models.load_model('my_model_94p09.h5')

# Load the face cascade classifier
faceCascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Define emotion labels
emotion_labels = ['Angry', 'Disgust', 'Fear', 'Happy', 'Neutral', 'Sad', 'Surprise']

# Open a video capture object
cap = cv2.VideoCapture(0)

while True:
    # Read a frame from the video capture
    ret, frame = cap.read()

    # Convert the frame to grayscale for face detection
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Detect faces in the frame
    faces = faceCascade.detectMultiScale(gray, 1.1, 4)

    for (x, y, w, h) in faces:
        # Crop the face region
        face_roi = frame[y:y + h, x:x + w]

        # Preprocess the face image for the model
        final_image = cv2.resize(face_roi, (224, 224))
        final_image = np.expand_dims(final_image, axis=0)
        final_image = final_image / 255.0

        # Make predictions using the loaded model
        predictions = new_model.predict(final_image)

        # Determine the emotion label based on predictions
        emotion_label = emotion_labels[np.argmax(predictions)]

        # Display the emotion label on the frame in a stylish way
        font = cv2.FONT_HERSHEY_COMPLEX
        color = (0, 255, 0)  # Green color
        thickness = 2
        font_scale = 1.5
        text_size = cv2.getTextSize(emotion_label, font, font_scale, thickness)[0]

        # Add a background rectangle at the bottom
        cv2.rectangle(frame, (x, y + h), (x + text_size[0] + 20, y + h + text_size[1] + 10), (0, 0, 0), cv2.FILLED)

        # Display the emotion label on the frame
        cv2.putText(frame, emotion_label, (x + 10, y + h + text_size[1] + 5), font, font_scale, color, thickness, cv2.LINE_AA)

        # Add a background rectangle at the top
        cv2.rectangle(frame, (0, 0), (frame.shape[1], 60), (0, 0, 0), cv2.FILLED)

        # Display the "Press 'a' to exit" message at the top
        exit_message = "Press 'a' to exit"
        exit_font = cv2.FONT_HERSHEY_SIMPLEX
        exit_color = (255, 255, 255)  # White color
        exit_thickness = 1
        exit_font_scale = 1
        exit_text_size = cv2.getTextSize(exit_message, exit_font, exit_font_scale, exit_thickness)[0]
        cv2.putText(frame, exit_message, (int((frame.shape[1] - exit_text_size[0]) / 2), 30),
                    exit_font, exit_font_scale, exit_color, exit_thickness, cv2.LINE_AA)

        # Draw a rectangle around the detected face
        cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)

    # Display the frame
    cv2.imshow('Facial Emotion Detection', frame)

    # Check for the 'a' key to exit the loop
    if cv2.waitKey(1) & 0xFF == ord('a'):
        break

# Release the video capture object and close all windows
cap.release()
cv2.destroyAllWindows()
